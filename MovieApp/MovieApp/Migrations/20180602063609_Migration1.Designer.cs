// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using MovieApp.Repository;
using System;

namespace MovieApp.Migrations
{
    [DbContext(typeof(MovieAppDbContext))]
    [Migration("20180602063609_Migration1")]
    partial class Migration1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("MovieApp.Entity.Actor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio")
                        .IsRequired();

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Sex")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("MovieApp.Entity.ActorMovieMap", b =>
                {
                    b.Property<Guid>("MovieId");

                    b.Property<Guid>("ActorId");

                    b.HasKey("MovieId", "ActorId");

                    b.HasIndex("ActorId");

                    b.ToTable("ActorMovieMap");
                });

            modelBuilder.Entity("MovieApp.Entity.Movie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Plot")
                        .IsRequired();

                    b.Property<string>("PosterURL")
                        .IsRequired();

                    b.Property<int>("YearOfRelease");

                    b.HasKey("Id");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("MovieApp.Entity.Producer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bio")
                        .IsRequired();

                    b.Property<DateTime>("DOB");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("Sex")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("MovieApp.Entity.ProducerMovieMap", b =>
                {
                    b.Property<Guid>("MovieId");

                    b.Property<Guid>("ProducerId");

                    b.HasKey("MovieId", "ProducerId");

                    b.HasIndex("ProducerId");

                    b.ToTable("ProducerMovieMap");
                });

            modelBuilder.Entity("MovieApp.Entity.ActorMovieMap", b =>
                {
                    b.HasOne("MovieApp.Entity.Actor", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieApp.Entity.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MovieApp.Entity.ProducerMovieMap", b =>
                {
                    b.HasOne("MovieApp.Entity.Movie", "Movie")
                        .WithMany()
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MovieApp.Entity.Producer", "Producer")
                        .WithMany()
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
